package com.chapter1;

/*
자바에서 테스트 코드가 중요한 이유
1. 소프트웨어의 품질 보장
2. 개발 과정에서 발생할 수 있는 오류 예방
3. 코드의 유지보수성 및 확장성 향상

테스트 코드의 종류
단위 테스트, 통합 테스트
=> 개발 기능의 정확성 검증 및 시스템 전체의 안정성 확인

특히, Junit과 같은 테스트 프레임워크를 활용하면 @Test, assertEquals, assertTrue 등
개발자가 의도한대로 코드가 동작하는지 확인할 수 있다.
=> 오류를 조기에 발견하고 수정할 수 있으며 개발 비용과 시간을 아낄 수 있다.

Junit은 자바 프로그래밍 언어를 위한 단위 테스트 프레임워크로
소프트웨어 개발에서 코드의 품질과 안정성을 보장하기 위해 널리 사용된다.
Junit은 테스트 작성과 실행을 용이하게하고 테스트 결과를 보고하는 기능을 제공한다.

테스트 클래스를 작성하기 위해서 클래스명.Tests를 추가해야 한다.
-> 하나의 메서드는 하나의 테스트를 담당, 독립적으로 동작한다.
 */

import org.junit.jupiter.api.Test;

public class ApplicationTests {

    // @Test 애너테이션이 붙은 메서드는 Junit에 의해 자동으로 테스트 케이스로 인식
    // 하나의 테스트가 다른 테스트의 결과에 영향을 미치지 않도록 보장
    // 또한 Test(timeout=1000)과 같이 시간을 지정하면 해당 시간내 실행되지 않을 경우 실패로 처리
    @Test
    void appTest() {
        System.out.println("테스트 A 시나리오");
    }

    @Test
    void appTest2() {
        System.out.println("테스트 B 시나리오");

    }


}
